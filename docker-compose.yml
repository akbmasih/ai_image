# /ai/docker-compose.yml
# Docker Compose configuration for AI server with PostgreSQL and MinIO

version: '3.8'

services:
  ai-server:
    build: .
    container_name: lingudesk_ai_server
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_SECURE=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=RS256
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLUX_API_URL=${FLUX_API_URL:-http://213.192.2.72:8080}
      - CHATTERBOX_API_URL=${CHATTERBOX_API_URL:-http://213.192.2.72:8080}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-50}
      - PLUGIN_RATE_LIMIT_PER_MINUTE=${PLUGIN_RATE_LIMIT_PER_MINUTE:-20}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - FORCE_REFRESH_HEADER=${FORCE_REFRESH_HEADER:-X-Force-Refresh}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_ROTATION_DAYS=${LOG_ROTATION_DAYS:-60}
      - CORS_ORIGINS=["*"]
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ai_cache:/app/cache
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: lingudesk_ai_postgres
    environment:
      - POSTGRES_DB=ai_db
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  minio:
    image: minio/minio:latest
    container_name: lingudesk_ai_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis for advanced caching (optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: lingudesk_ai_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lingudesk_ai_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lingudesk_ai_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ai_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  ai_cache:
    driver: local
  prometheus_data:
    driver: local
    profiles:
      - monitoring
  grafana_data:
    driver: local
    profiles:
      - monitoring

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16